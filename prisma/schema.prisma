generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELED
}

enum RequestType {
  PETITION
  COMPLAINT
  CLAIM
  SUGGESTION
}

enum EmployeeRole {
  ADMIN
  EMPLOYEE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
}

model ISP {
  id               String        @id @default(uuid())
  name             String
  email            String        @unique
  password         String        // ISP login credentials
  logo             String?
  contact          String?
  website          String?
  primaryColor     String?
  secondaryColor   String?
  address          String?
  phone            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?

  employees        Employee[]
  requests         Request[]
  analyticLogs     AnalyticLog[]
}

model Employee {
  id                    String          @id @default(uuid())
  name                  String
  email                 String          @unique
  password              String
  role                  EmployeeRole    @default(EMPLOYEE)
  status                EmployeeStatus  @default(ACTIVE)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  deletedAt             DateTime?

  ispId                 String
  isp                   ISP             @relation(fields: [ispId], references: [id])

  respondedRequests     Request[]       @relation("EmployeeResponse")
  analyticLogs          AnalyticLog[]
}

model Request {
  id              String          @id @default(uuid())
  fullName        String
  phone           String
  address         String
  email           String
  subject         String
  details         String
  type            RequestType     // Petition, Complaint, Claim, Suggestion
  status          RequestStatus   @default(PENDING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  resolvedAt      DateTime?
  deletedAt       DateTime?

  ispId           String
  isp             ISP             @relation(fields: [ispId], references: [id])

  respondedById   String?
  respondedBy     Employee?       @relation("EmployeeResponse", fields: [respondedById], references: [id])

  analyticLogs    AnalyticLog[]
}

model AnalyticLog {
  id           String       @id @default(uuid())
  type         String       // Example: "CREATE_REQUEST", "UPDATE_STATUS", "RESPONSE"
  description  String?
  createdAt    DateTime     @default(now())

  requestId    String?
  request      Request?     @relation(fields: [requestId], references: [id])

  employeeId   String?
  employee     Employee?    @relation(fields: [employeeId], references: [id])

  ispId        String?
  isp          ISP?         @relation(fields: [ispId], references: [id])
}
